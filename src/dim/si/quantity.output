State 13 conflicts: 1 shift/reduce
State 14 conflicts: 1 shift/reduce
State 17 conflicts: 1 shift/reduce


Grammar

    0 $accept: output $end

    1 output: unit_group
    2       | error

    3 unit_group: OPEN_PARENS unit_group CLOSE_PARENS
    4           | unit_group EXPONENT exponent_group
    5           | unit_group DIVIDE unit_group
    6           | unit_group MULTIPLY unit_group
    7           | UNIT
    8           | unit_group BAD_INPUT

    9 exponent_group: OPEN_PARENS exponent_group CLOSE_PARENS
   10               | INTEGER
   11               | exponent_group BAD_INPUT


Terminals, with rules where they appear

    $end (0) 0
    error (256) 2
    MULTIPLY (258) 6
    DIVIDE (259) 5
    EXPONENT (260) 4
    OPEN_PARENS (261) 3 9
    CLOSE_PARENS (262) 3 9
    BAD_INPUT (263) 8 11
    INTEGER <integer> (264) 10
    UNIT <unit> (265) 7


Nonterminals, with rules where they appear

    $accept (11)
        on left: 0
    output <quantity> (12)
        on left: 1 2
        on right: 0
    unit_group <quantity> (13)
        on left: 3 4 5 6 7 8
        on right: 1 3 4 5 6 8
    exponent_group <integer> (14)
        on left: 9 10 11
        on right: 4 9 11


State 0

    0 $accept: . output $end
    1 output: . unit_group
    2       | . error
    3 unit_group: . OPEN_PARENS unit_group CLOSE_PARENS
    4           | . unit_group EXPONENT exponent_group
    5           | . unit_group DIVIDE unit_group
    6           | . unit_group MULTIPLY unit_group
    7           | . UNIT
    8           | . unit_group BAD_INPUT

    error        shift, and go to state 1
    OPEN_PARENS  shift, and go to state 2
    UNIT         shift, and go to state 3

    output      go to state 4
    unit_group  go to state 5


State 1

    2 output: error .

    $default  reduce using rule 2 (output)


State 2

    3 unit_group: . OPEN_PARENS unit_group CLOSE_PARENS
    3           | OPEN_PARENS . unit_group CLOSE_PARENS
    4           | . unit_group EXPONENT exponent_group
    5           | . unit_group DIVIDE unit_group
    6           | . unit_group MULTIPLY unit_group
    7           | . UNIT
    8           | . unit_group BAD_INPUT

    OPEN_PARENS  shift, and go to state 2
    UNIT         shift, and go to state 3

    unit_group  go to state 6


State 3

    7 unit_group: UNIT .

    $default  reduce using rule 7 (unit_group)


State 4

    0 $accept: output . $end

    $end  shift, and go to state 7


State 5

    1 output: unit_group .  [$end]
    4 unit_group: unit_group . EXPONENT exponent_group
    5           | unit_group . DIVIDE unit_group
    6           | unit_group . MULTIPLY unit_group
    8           | unit_group . BAD_INPUT

    MULTIPLY   shift, and go to state 8
    DIVIDE     shift, and go to state 9
    EXPONENT   shift, and go to state 10
    BAD_INPUT  shift, and go to state 11

    $default  reduce using rule 1 (output)


State 6

    3 unit_group: OPEN_PARENS unit_group . CLOSE_PARENS
    4           | unit_group . EXPONENT exponent_group
    5           | unit_group . DIVIDE unit_group
    6           | unit_group . MULTIPLY unit_group
    8           | unit_group . BAD_INPUT

    MULTIPLY      shift, and go to state 8
    DIVIDE        shift, and go to state 9
    EXPONENT      shift, and go to state 10
    CLOSE_PARENS  shift, and go to state 12
    BAD_INPUT     shift, and go to state 11


State 7

    0 $accept: output $end .

    $default  accept


State 8

    3 unit_group: . OPEN_PARENS unit_group CLOSE_PARENS
    4           | . unit_group EXPONENT exponent_group
    5           | . unit_group DIVIDE unit_group
    6           | . unit_group MULTIPLY unit_group
    6           | unit_group MULTIPLY . unit_group
    7           | . UNIT
    8           | . unit_group BAD_INPUT

    OPEN_PARENS  shift, and go to state 2
    UNIT         shift, and go to state 3

    unit_group  go to state 13


State 9

    3 unit_group: . OPEN_PARENS unit_group CLOSE_PARENS
    4           | . unit_group EXPONENT exponent_group
    5           | . unit_group DIVIDE unit_group
    5           | unit_group DIVIDE . unit_group
    6           | . unit_group MULTIPLY unit_group
    7           | . UNIT
    8           | . unit_group BAD_INPUT

    OPEN_PARENS  shift, and go to state 2
    UNIT         shift, and go to state 3

    unit_group  go to state 14


State 10

    4 unit_group: unit_group EXPONENT . exponent_group
    9 exponent_group: . OPEN_PARENS exponent_group CLOSE_PARENS
   10               | . INTEGER
   11               | . exponent_group BAD_INPUT

    OPEN_PARENS  shift, and go to state 15
    INTEGER      shift, and go to state 16

    exponent_group  go to state 17


State 11

    8 unit_group: unit_group BAD_INPUT .

    $default  reduce using rule 8 (unit_group)


State 12

    3 unit_group: OPEN_PARENS unit_group CLOSE_PARENS .

    $default  reduce using rule 3 (unit_group)


State 13

    4 unit_group: unit_group . EXPONENT exponent_group
    5           | unit_group . DIVIDE unit_group
    6           | unit_group . MULTIPLY unit_group
    6           | unit_group MULTIPLY unit_group .  [$end, MULTIPLY, DIVIDE, CLOSE_PARENS, BAD_INPUT]
    8           | unit_group . BAD_INPUT

    EXPONENT   shift, and go to state 10
    BAD_INPUT  shift, and go to state 11

    BAD_INPUT  [reduce using rule 6 (unit_group)]
    $default   reduce using rule 6 (unit_group)

    Conflict between rule 6 and token MULTIPLY resolved as reduce (%left MULTIPLY).
    Conflict between rule 6 and token DIVIDE resolved as reduce (%left DIVIDE).
    Conflict between rule 6 and token EXPONENT resolved as shift (MULTIPLY < EXPONENT).


State 14

    4 unit_group: unit_group . EXPONENT exponent_group
    5           | unit_group . DIVIDE unit_group
    5           | unit_group DIVIDE unit_group .  [$end, MULTIPLY, DIVIDE, CLOSE_PARENS, BAD_INPUT]
    6           | unit_group . MULTIPLY unit_group
    8           | unit_group . BAD_INPUT

    EXPONENT   shift, and go to state 10
    BAD_INPUT  shift, and go to state 11

    BAD_INPUT  [reduce using rule 5 (unit_group)]
    $default   reduce using rule 5 (unit_group)

    Conflict between rule 5 and token MULTIPLY resolved as reduce (%left MULTIPLY).
    Conflict between rule 5 and token DIVIDE resolved as reduce (%left DIVIDE).
    Conflict between rule 5 and token EXPONENT resolved as shift (DIVIDE < EXPONENT).


State 15

    9 exponent_group: . OPEN_PARENS exponent_group CLOSE_PARENS
    9               | OPEN_PARENS . exponent_group CLOSE_PARENS
   10               | . INTEGER
   11               | . exponent_group BAD_INPUT

    OPEN_PARENS  shift, and go to state 15
    INTEGER      shift, and go to state 16

    exponent_group  go to state 18


State 16

   10 exponent_group: INTEGER .

    $default  reduce using rule 10 (exponent_group)


State 17

    4 unit_group: unit_group EXPONENT exponent_group .  [$end, MULTIPLY, DIVIDE, EXPONENT, CLOSE_PARENS, BAD_INPUT]
   11 exponent_group: exponent_group . BAD_INPUT

    BAD_INPUT  shift, and go to state 19

    BAD_INPUT  [reduce using rule 4 (unit_group)]
    $default   reduce using rule 4 (unit_group)


State 18

    9 exponent_group: OPEN_PARENS exponent_group . CLOSE_PARENS
   11               | exponent_group . BAD_INPUT

    CLOSE_PARENS  shift, and go to state 20
    BAD_INPUT     shift, and go to state 19


State 19

   11 exponent_group: exponent_group BAD_INPUT .

    $default  reduce using rule 11 (exponent_group)


State 20

    9 exponent_group: OPEN_PARENS exponent_group CLOSE_PARENS .

    $default  reduce using rule 9 (exponent_group)
