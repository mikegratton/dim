Grammar

    0 $accept: output $end

    1 output: unit_group
    2       | unit_group BAD_INPUT
    3       | BAD_INPUT unit_group
    4       | BAD_INPUT
    5       | error

    6 unit_group: OPEN_PARENS unit_group CLOSE_PARENS
    7           | unit_group EXPONENT exponent_group
    8           | unit_group DIVIDE unit_group
    9           | unit_group MULTIPLY unit_group
   10           | UNIT

   11 exponent_group: OPEN_PARENS exponent_group CLOSE_PARENS
   12               | INTEGER


Terminals, with rules where they appear

    $end (0) 0
    error (256) 5
    MULTIPLY (258) 9
    DIVIDE (259) 8
    EXPONENT (260) 7
    OPEN_PARENS (261) 6 11
    CLOSE_PARENS (262) 6 11
    INTEGER <integer> (263) 12
    UNIT <unit> (264) 10
    BAD_INPUT (265) 2 3 4


Nonterminals, with rules where they appear

    $accept (11)
        on left: 0
    output <quantity> (12)
        on left: 1 2 3 4 5
        on right: 0
    unit_group <quantity> (13)
        on left: 6 7 8 9 10
        on right: 1 2 3 6 7 8 9
    exponent_group <integer> (14)
        on left: 11 12
        on right: 7 11


State 0

    0 $accept: • output $end
    1 output: • unit_group
    2       | • unit_group BAD_INPUT
    3       | • BAD_INPUT unit_group
    4       | • BAD_INPUT
    5       | • error
    6 unit_group: • OPEN_PARENS unit_group CLOSE_PARENS
    7           | • unit_group EXPONENT exponent_group
    8           | • unit_group DIVIDE unit_group
    9           | • unit_group MULTIPLY unit_group
   10           | • UNIT

    error        shift, and go to state 1
    OPEN_PARENS  shift, and go to state 2
    UNIT         shift, and go to state 3
    BAD_INPUT    shift, and go to state 4

    output      go to state 5
    unit_group  go to state 6


State 1

    5 output: error •

    $default  reduce using rule 5 (output)


State 2

    6 unit_group: • OPEN_PARENS unit_group CLOSE_PARENS
    6           | OPEN_PARENS • unit_group CLOSE_PARENS
    7           | • unit_group EXPONENT exponent_group
    8           | • unit_group DIVIDE unit_group
    9           | • unit_group MULTIPLY unit_group
   10           | • UNIT

    OPEN_PARENS  shift, and go to state 2
    UNIT         shift, and go to state 3

    unit_group  go to state 7


State 3

   10 unit_group: UNIT •

    $default  reduce using rule 10 (unit_group)


State 4

    3 output: BAD_INPUT • unit_group
    4       | BAD_INPUT •  [$end]
    6 unit_group: • OPEN_PARENS unit_group CLOSE_PARENS
    7           | • unit_group EXPONENT exponent_group
    8           | • unit_group DIVIDE unit_group
    9           | • unit_group MULTIPLY unit_group
   10           | • UNIT

    OPEN_PARENS  shift, and go to state 2
    UNIT         shift, and go to state 3

    $default  reduce using rule 4 (output)

    unit_group  go to state 8


State 5

    0 $accept: output • $end

    $end  shift, and go to state 9


State 6

    1 output: unit_group •  [$end]
    2       | unit_group • BAD_INPUT
    7 unit_group: unit_group • EXPONENT exponent_group
    8           | unit_group • DIVIDE unit_group
    9           | unit_group • MULTIPLY unit_group

    MULTIPLY   shift, and go to state 10
    DIVIDE     shift, and go to state 11
    EXPONENT   shift, and go to state 12
    BAD_INPUT  shift, and go to state 13

    $default  reduce using rule 1 (output)


State 7

    6 unit_group: OPEN_PARENS unit_group • CLOSE_PARENS
    7           | unit_group • EXPONENT exponent_group
    8           | unit_group • DIVIDE unit_group
    9           | unit_group • MULTIPLY unit_group

    MULTIPLY      shift, and go to state 10
    DIVIDE        shift, and go to state 11
    EXPONENT      shift, and go to state 12
    CLOSE_PARENS  shift, and go to state 14


State 8

    3 output: BAD_INPUT unit_group •  [$end]
    7 unit_group: unit_group • EXPONENT exponent_group
    8           | unit_group • DIVIDE unit_group
    9           | unit_group • MULTIPLY unit_group

    MULTIPLY  shift, and go to state 10
    DIVIDE    shift, and go to state 11
    EXPONENT  shift, and go to state 12

    $default  reduce using rule 3 (output)


State 9

    0 $accept: output $end •

    $default  accept


State 10

    6 unit_group: • OPEN_PARENS unit_group CLOSE_PARENS
    7           | • unit_group EXPONENT exponent_group
    8           | • unit_group DIVIDE unit_group
    9           | • unit_group MULTIPLY unit_group
    9           | unit_group MULTIPLY • unit_group
   10           | • UNIT

    OPEN_PARENS  shift, and go to state 2
    UNIT         shift, and go to state 3

    unit_group  go to state 15


State 11

    6 unit_group: • OPEN_PARENS unit_group CLOSE_PARENS
    7           | • unit_group EXPONENT exponent_group
    8           | • unit_group DIVIDE unit_group
    8           | unit_group DIVIDE • unit_group
    9           | • unit_group MULTIPLY unit_group
   10           | • UNIT

    OPEN_PARENS  shift, and go to state 2
    UNIT         shift, and go to state 3

    unit_group  go to state 16


State 12

    7 unit_group: unit_group EXPONENT • exponent_group
   11 exponent_group: • OPEN_PARENS exponent_group CLOSE_PARENS
   12               | • INTEGER

    OPEN_PARENS  shift, and go to state 17
    INTEGER      shift, and go to state 18

    exponent_group  go to state 19


State 13

    2 output: unit_group BAD_INPUT •

    $default  reduce using rule 2 (output)


State 14

    6 unit_group: OPEN_PARENS unit_group CLOSE_PARENS •

    $default  reduce using rule 6 (unit_group)


State 15

    7 unit_group: unit_group • EXPONENT exponent_group
    8           | unit_group • DIVIDE unit_group
    9           | unit_group • MULTIPLY unit_group
    9           | unit_group MULTIPLY unit_group •  [$end, MULTIPLY, DIVIDE, CLOSE_PARENS, BAD_INPUT]

    EXPONENT  shift, and go to state 12

    $default  reduce using rule 9 (unit_group)

    Conflict between rule 9 and token MULTIPLY resolved as reduce (%left MULTIPLY).
    Conflict between rule 9 and token DIVIDE resolved as reduce (%left DIVIDE).
    Conflict between rule 9 and token EXPONENT resolved as shift (MULTIPLY < EXPONENT).


State 16

    7 unit_group: unit_group • EXPONENT exponent_group
    8           | unit_group • DIVIDE unit_group
    8           | unit_group DIVIDE unit_group •  [$end, MULTIPLY, DIVIDE, CLOSE_PARENS, BAD_INPUT]
    9           | unit_group • MULTIPLY unit_group

    EXPONENT  shift, and go to state 12

    $default  reduce using rule 8 (unit_group)

    Conflict between rule 8 and token MULTIPLY resolved as reduce (%left MULTIPLY).
    Conflict between rule 8 and token DIVIDE resolved as reduce (%left DIVIDE).
    Conflict between rule 8 and token EXPONENT resolved as shift (DIVIDE < EXPONENT).


State 17

   11 exponent_group: • OPEN_PARENS exponent_group CLOSE_PARENS
   11               | OPEN_PARENS • exponent_group CLOSE_PARENS
   12               | • INTEGER

    OPEN_PARENS  shift, and go to state 17
    INTEGER      shift, and go to state 18

    exponent_group  go to state 20


State 18

   12 exponent_group: INTEGER •

    $default  reduce using rule 12 (exponent_group)


State 19

    7 unit_group: unit_group EXPONENT exponent_group •

    $default  reduce using rule 7 (unit_group)


State 20

   11 exponent_group: OPEN_PARENS exponent_group • CLOSE_PARENS

    CLOSE_PARENS  shift, and go to state 21


State 21

   11 exponent_group: OPEN_PARENS exponent_group CLOSE_PARENS •

    $default  reduce using rule 11 (exponent_group)
